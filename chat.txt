below is the readme and implementation of a simple functional programming language
./README.md
# FP

A simple functional programming language in 130 lines of code with `functions as first-class citizens`. $\mathbb{F}_p$ also denotes the finite field of order $p$ 

## HOW TO USE?

- A go REPL is available by running `go run cmd/repl/main.go`

- A experimental web REPL is available in `web_repl` or [https://khanh101.github.io/fp/web_repl/](https://khanh101.github.io/fp/web_repl/) (cannot handle `ctrl+c` and `ctrl+d`, cannot use `print` for obvious reasons)

- a simple program `example.lisp`

- hello world ! `echo "(print (unicode 72 101 108 108 111 44 32 87 111 114 108 100 33))" | go run cmd/repl/main.go 2> /dev/null`

Have fun ðŸ¤—

## MANUAL

- for builtin modules, extensions, see `MANUAL.md`

### SPECIAL SYMBOLS
- wildcard symbol: `_` is a special symbol used in `case` to mark every other cases
- unwrap symbol: `*` is a special symbol to unwrap a list, for example `(add 1 2)` is equivalent to `(add * (list 1 2))` 

## COMMON QUESTIONS

- How to handle infix operator? 

translate `[<expr_1> <name_1> <expr_2> <name_2> <expr_3>]` into `(<name_1> <expr_1> (<name_2> <expr_2> <expr_3>))` - 
I don't have any plan implementing this

- Isn't `(let x 3)` equivalent to `(let x (lambda 3))`?

yes, if functions are pure, then we can consider `(let x <expr>)` as a pure function of the form `(let x (lambda <expr>))`. 
however, if functions are not pure, if `x` is defined locally, `(let f (lambda (x + 3)))` and `let f (x + 3)` are different
since variables are evaluated at definition but functions are only evaluated when it is called,
that is if we pass `f` outside of the function, it no longer valid.
in the code below, i gave an example with `(let x_v (print 2 5))` and `(func x_f (print 2 6))`

- How to handle higher-order functions?

higher-order function is already implemented

- Tail call optimization

WIP - I couldn't get the logic right at the moment

- Parallel map

WIP - Just need to make a copy of the last frame, invoke functions in parallel

- Parallel everything

if we assume functions are pure, one can consider the whole program as a set of expressions (with some dependencies of `let`)
each function call only need its own variable scope, they can execute every expression at the same time (possibly with some waiting for `let` statement) - 
this is a very interesting idea, but I don't think it's easy to implement

## But can it run Doom?

no ðŸ˜…

./MANUAL.md
```lisp
# command-line-arguments
cmd/man/main.go:28:20: cannot use fp.Name(name) (value of string type fp.Name) as context.Context value in argument to r.Step: fp.Name does not implement context.Context (missing method Deadline)
```
./cmd/man/main.go
package main

import (
	"fmt"
	"fp/pkg/fp"
	"os"
	"sort"
)

func write(format string, args ...interface{}) {
	_, _ = fmt.Fprintf(os.Stderr, format, args...)
	_ = os.Stderr.Sync() // flush
}

func writeln(format string, args ...interface{}) {
	write(format+"\n", args...)
}

func main() {
	r := fp.NewStdRuntime()
	writeln("welcome to fp repl! type function or module name for help")
	var funcNameList []string
	for k := range r.Stack[0] {
		funcNameList = append(funcNameList, string(k))
	}
	sort.Strings(funcNameList)
	for _, name := range funcNameList {
		o, err := r.Step(fp.Name(name), nil)
		if err != nil {
			panic(err)
		}
		writeln(">>>%s", name)
		writeln("%v", o)
	}
}
./cmd/test/main.go
package main

import (
	"fmt"
	"strings"
	"unicode"
)

func splitWords(input string) []string {
	var result []string
	var word strings.Builder
	inQuotes := false
	i := 0
	for i < len(input) {
		char := input[i]

		if char == '\\' && i+1 < len(input) { // Handle escaped characters
			nextChar := input[i+1]
			switch nextChar {
			case 'n':
				word.WriteByte('\n')
			case 't':
				word.WriteByte('\t')
			case 'r':
				word.WriteByte('\r')
			case '"':
				word.WriteByte('"')
			case '\\':
				word.WriteByte('\\')
			default:
				word.WriteByte(nextChar)
			}
			i += 2
			continue
		}

		if char == '"' { // Handle quoted strings
			inQuotes = !inQuotes
			i++
			continue
		}

		if unicode.IsSpace(rune(char)) && !inQuotes { // Split on whitespace outside quotes
			if word.Len() > 0 {
				result = append(result, word.String())
				word.Reset()
			}
			i++
			continue
		}

		word.WriteByte(char)
		i++
	}

	if word.Len() > 0 {
		result = append(result, word.String())
	}

	return result
}

func main() {
	input := "hello world \"this is a \\\"quoted\\\" string\" test\nnew line\ttab"
	words := splitWords(input)
	for _, w := range words {
		fmt.Println(w)
	}

	// Output: ["hello" "world" "this is a \"quoted\" string" "test"]
}
./cmd/repl/main.go
package main

import (
	"errors"
	"fmt"
	"fp/pkg/fp"
	"fp/pkg/repl"
	"github.com/chzyer/readline"
	"io"
	"os"
	"os/signal"
	"syscall"
	"time"
)

type signalCtx struct {
	interrupt chan struct{}
}

func (ctx *signalCtx) Value(key any) any {
	//TODO implement me
	panic("implement me")
}

func (ctx *signalCtx) Done() <-chan struct{} {
	return ctx.interrupt
}
func (ctx *signalCtx) Deadline() (deadline time.Time, ok bool) {
	//TODO implement me
	panic("implement me")
}
func (ctx *signalCtx) Err() error {
	//TODO implement me
	panic("implement me")
}

func main() {
	repl, welcome := repl.NewFP(fp.NewStdRuntime())
	_, _ = fmt.Fprintf(os.Stderr, welcome)

	// Create a readline instance with a static prompt
	rl, err := readline.NewEx(&readline.Config{
		Prompt:          ">>> ",                 // Default prompt
		HistoryFile:     "/tmp/fp_repl_history", // Save command history
		InterruptPrompt: "^C",
	})
	if err != nil {
		panic(err)
	}
	defer rl.Close()

	ctx := &signalCtx{interrupt: make(chan struct{}, 1)}

	// Channel for OS signals (SIGINT, SIGTERM)
	signalCh := make(chan os.Signal, 1)
	signal.Notify(signalCh, os.Interrupt, syscall.SIGTERM)

	// Goroutine to listen for interrupts and notify REPL
	go func() {
		for sig := range signalCh {
			if sig == os.Interrupt {
				select {
				case ctx.interrupt <- struct{}{}:
				default:
				}
			} else {
				os.Exit(0) // Exit cleanly on SIGTERM
			}
		}
	}()

	for {
		// Read input
		line, err := rl.Readline()
		if err != nil {
			if errors.Is(err, readline.ErrInterrupt) { // Handle Ctrl+C
				output := repl.ClearBuffer()
				_, _ = fmt.Fprint(os.Stderr, "    "+output)
				continue
			} else if err == io.EOF { // Handle Ctrl+D (exit)
				os.Exit(0)
			}
			panic(err)
		}

		// Process input in REPL
		output, executed := repl.ReplyInput(ctx, line)

		// Print REPL output
		if output != "" {
			_, _ = fmt.Fprint(os.Stderr, "    "+output)
		}

		// If executed is true, print prompt again
		if executed {
			// Reset the prompt to ">>> " when input is executed
			rl.SetPrompt(">>> ")
		} else {
			// Otherwise, indent continuation line (you can choose what to show)
			rl.SetPrompt("    ") // Or set it to "" for no prompt if not executed
		}
	}
}
./web_repl/main.go
package main

import (
	"context"
	"fmt"
	"fp/pkg/fp"
	"fp/pkg/repl"
	"strings"
	"syscall/js"
)

var r repl.REPL

func write(format string, a ...interface{}) {
	output := fmt.Sprintf(format, a...)
	output = strings.ReplaceAll(output, "\n", "<br>")
	js.Global().Call("updateOutput", output)
}

func evaluate(this js.Value, p []js.Value) interface{} {
	if len(p) == 0 {
		return js.ValueOf("no input")
	}
	input := p[0].String()

	// repl here
	output, _ := r.ReplyInput(context.Background(), input)
	// end repl here

	output = strings.ReplaceAll(output, "\n", "<br>")
	return output
}

// Go function to handle buffer clearing
func clearBuffer(this js.Value, p []js.Value) interface{} {
	write(r.ClearBuffer())
	return nil
}

func main() {
	// initialize
	var welcome string
	r, welcome = repl.NewFP(fp.NewStdRuntime())
	write(welcome)

	js.Global().Set("evaluate", js.FuncOf(evaluate))
	js.Global().Set("clearBuffer", js.FuncOf(clearBuffer))
	// Keep WebAssembly running
	select {}
}
./pkg/fp/runtime.go
package fp

import (
	"strconv"
)

// NewCoreRuntime - runtime + core control flow extensions
func NewCoreRuntime() *Runtime {
	return (&Runtime{
		parseLiteral: func(lit String) (Object, error) {
			if lit == "_" {
				return Wildcard{}, nil
			}
			if lit == "*" {
				return Unwrap{}, nil
			}
			i, err := strconv.Atoi(lit.String())
			return Int(i), err
		},
		Stack: []Frame{
			make(Frame),
		},
	}).
		LoadModule(letModule).
		LoadModule(delModule).
		LoadModule(lambdaModule).
		LoadModule(caseModule)
}

// NewBasicRuntime : NewCoreRuntime + minimal set of arithmetic extensions for Turing completeness
func NewBasicRuntime() *Runtime {
	return NewCoreRuntime().
		LoadExtension(tailExtension).
		LoadExtension(addExtension).
		LoadExtension(subExtension).
		LoadExtension(signExtension)
}

// NewStdRuntime : NewCoreRuntime + standard functions
func NewStdRuntime() *Runtime {
	return NewBasicRuntime().
		LoadExtension(mulExtension).
		LoadExtension(divExtension).
		LoadExtension(modExtension).
		LoadExtension(printExtension).
		LoadExtension(listExtension).
		LoadExtension(appendExtension).
		LoadExtension(sliceExtension).
		LoadExtension(peekExtension).
		LoadExtension(lenExtension).
		LoadModule(mapModule).
		LoadExtension(typeExtension).
		LoadModule(stackModule).
		LoadExtension(unicodeExtension).
		LoadModule(kaboomModule).
		LoadExtension(doomExtension)
}
./pkg/fp/ast.go
package fp

// Expr : union of Name, LambdaExpr
type Expr interface {
	String() string
	MustTypeExpr() struct{} // for type-safety every Expr must implement this
}

type Name string

func (e Name) String() string {
	return string(e)
}

func (e Name) MustTypeExpr() struct{} {
	return struct{}{}
}

// LambdaExpr : S-expression
type LambdaExpr struct {
	Name Name
	Args []Expr
}

func (e LambdaExpr) String() string {
	s := ""
	s += "("
	s += e.Name.String()
	for _, arg := range e.Args {
		s += " " + arg.String()
	}
	s += ")"
	return s
}

func (e LambdaExpr) MustTypeExpr() struct{} {
	return struct{}{}
}
./pkg/fp/parser.go
package fp

import (
	"errors"
	"fmt"
	"strings"
)

type Token = string

func pop(tokenList []Token) ([]Token, Token, error) {
	if len(tokenList) == 0 {
		return nil, "", errors.New("empty token list")
	}
	return tokenList[1:], tokenList[0], nil
}

func removeComments(str string) string {
	lines := strings.Split(str, "\n")
	var newLines []string
	for _, line := range lines {
		newLines = append(newLines, strings.Split(line, "//")[0])
	}
	return strings.Join(newLines, "\n")
}

func processSpecialChar(str string) string {
	specialChars := map[rune]struct{}{
		'(': {},
		')': {},
		'*': {}, // unwrap symbol
	}
	newStr := ""
	for _, ch := range str {
		if _, ok := specialChars[ch]; ok {
			newStr += fmt.Sprintf(" %c ", ch)
		} else {
			newStr += string(ch)
		}
	}
	return newStr
}

// Tokenize : TODO - process raw string ""
func Tokenize(str string) []Token {
	str = removeComments(str)
	str = processSpecialChar(str)
	// tokenize
	return strings.Fields(str)
}

func ParseAll(tokenList []Token) ([]Expr, []Token) {
	var expr Expr
	var exprList []Expr
	var err error
	for len(tokenList) > 0 {
		expr, tokenList, err = parseSingle(tokenList)
		if err != nil {
			panic(err)
		}
		exprList = append(exprList, expr)
	}
	return exprList, tokenList
}

type Parser struct {
	Buffer []Token
}

func (p *Parser) Clear() {
	p.Buffer = []Token{}
}

func (p *Parser) Input(tok Token) Expr {
	p.Buffer = append(p.Buffer, tok)
	// try parse single // TODO : do this for simplicity
	buffer := append([]Token(nil), p.Buffer...) // copy
	expr, buffer, err := parseSingle(buffer)
	if err != nil {
		// parse fail - don't do anything
		return nil
	} else {
		// parse ok - update buffer
		p.Buffer = buffer
		return expr
	}
}

func parseSingle(tokenList []Token) (Expr, []Token, error) {
	var parse func(tokenList []Token) (Expr, []Token, bool, error)
	parse = func(tokenList []Token) (Expr, []Token, bool, error) {
		if len(tokenList) == 0 {
			return nil, nil, false, errors.New("empty token list")
		}
		tokenList, head, err := pop(tokenList) // pop ( or [ or name
		if err != nil {
			return nil, nil, false, err
		}
		switch head {
		case "(": // start with Open
			tokenList, funcName, err := pop(tokenList)
			if err != nil {
				return nil, nil, false, err
			}
			if funcName == ")" { // empty
				return parse(tokenList)
			}
			var expr Expr
			var exprList []Expr
			var endWithClose bool
			for {
				expr, tokenList, endWithClose, err = parse(tokenList)
				if err != nil {
					return nil, nil, false, err
				}
				if endWithClose {
					// end with Close
					break
				}
				exprList = append(exprList, expr)
			}
			return LambdaExpr{
				Name: Name(funcName),
				Args: exprList,
			}, tokenList, false, nil
		default:
			return Name(head), tokenList, head == ")", nil
		}
	}

	expr, tokenList, endWithClose, err := parse(tokenList)
	if err != nil {
		return nil, nil, err
	}
	if endWithClose {
		return nil, nil, errors.New("parse error")
	}
	return expr, tokenList, nil
}
./pkg/fp/runtime_module.go
package fp

import (
	"context"
	"fmt"
)

var letModule = Module{
	Name: "let",
	Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
		if len(expr.Args) < 2 {
			return nil, fmt.Errorf("not enough arguments for let")
		}
		name := String(expr.Args[0].(Name))
		outputs, err := r.stepMany(ctx, expr.Args[1:]...)
		if err != nil {
			return nil, err
		}
		r.Stack[len(r.Stack)-1][name] = outputs[len(outputs)-1]
		return outputs[len(outputs)-1], nil
	},
	Man: "module: (let x 3) - assign value 3 to local variable x",
}

var delModule = Module{
	Name: "del",
	Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
		if len(expr.Args) < 1 {
			return nil, fmt.Errorf("not enough arguments for del")
		}
		name := String(expr.Args[0].(Name))
		_, err := r.stepMany(ctx, expr.Args[1:]...)
		if err != nil {
			return nil, err
		}
		delete(r.Stack[len(r.Stack)-1], name)
		return nil, nil
	},
	Man: "module: (del x) - delete variable x",
}

var lambdaModule = Module{
	Name: "lambda",
	Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
		v := Lambda{
			Params: nil,
			Impl:   nil,
			Frame:  nil,
		}
		for i := 0; i < len(expr.Args)-1; i++ {
			paramName := String(expr.Args[i].(Name))
			v.Params = append(v.Params, paramName)
		}
		v.Impl = expr.Args[len(expr.Args)-1]
		v.Frame = make(Frame).Update(r.Stack[len(r.Stack)-1])
		return v, nil
	},
	Man: "module: (lambda x y (add x y) - declare a function",
}

var caseModule = Module{
	Name: "case",
	Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
		cond, err := r.Step(ctx, expr.Args[0])
		if err != nil {
			return nil, err
		}
		i, err := func() (int, error) {
			for i := 1; i < len(expr.Args); i += 2 {
				comp, err := r.Step(ctx, expr.Args[i])
				if err != nil {
					return 0, err
				}
				if _, ok := comp.(Wildcard); ok || comp == cond {
					return i, nil
				}
			}
			return 0, fmt.Errorf("runtime error: no case matched %s", expr)
		}()
		if err != nil {
			return nil, err
		}
		return r.Step(ctx, expr.Args[i+1])
	},
	Man: "module: (case x 1 2 4 5) - case, if x=1 then return 3, if x=4 the return 5",
}

var kaboomModule = Module{
	Name: "kaboom",
	Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
		r.Stack = r.Stack[0:1]
		return nil, nil
	},
	Man: "module: (kaboom) - remove everything except global frame",
}

var doomExtension = Extension{
	Name: "doom",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		return String(fmt.Sprintf("i told you - we don't have Doom yet")), nil
	},
	Man: "module: (doom) - extra modules required https://youtu.be/dQw4w9WgXcQ",
}

var tailExtension = Extension{
	Name: "tail",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		return values[len(values)-1], nil
	},
	Man: "module: (tail (print 1) (print 2) 3) - exec a sequence of expressions and return the last one",
}

var addExtension = Extension{
	Name: "add",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		var sum Int = 0
		for i := 0; i < len(values); i++ {
			v, ok := values[i].(Int)
			if !ok {
				return nil, fmt.Errorf("adding non-integer values")
			}
			sum += v
		}
		return sum, nil
	},
	Man: "module: (add 1 (add 2 3) 3) - exec a sequence of expressions and return the sum",
}

var mulExtension = Extension{
	Name: "mul",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		var sum Int = 1
		for i := 0; i < len(values); i++ {
			v, ok := values[i].(Int)
			if !ok {
				return nil, fmt.Errorf("multiplying non-integer values")
			}
			sum *= v
		}
		return sum, nil
	},
	Man: "module: (mul 1 (add 2 3) 3) - exec a sequence of expressions and return the product",
}

var subExtension = Extension{
	Name: "sub",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		if len(values) != 2 {
			return nil, fmt.Errorf("subtract requires 2 arguments")
		}
		a, ok := values[0].(Int)
		if !ok {
			return nil, fmt.Errorf("subtract non-integer value")
		}
		b, ok := values[1].(Int)
		if !ok {
			return nil, fmt.Errorf("subtract non-integer value")
		}
		return a - b, nil
	},
	Man: "module: (sub 2 (add 1 1)) - exec two expressions and return difference",
}

var divExtension = Extension{
	Name: "div",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		if len(values) != 2 {
			return nil, fmt.Errorf("dividing requires 2 arguments")
		}
		a, ok := values[0].(Int)
		if !ok {
			return nil, fmt.Errorf("dividing non-integer value")
		}
		b, ok := values[1].(Int)
		if !ok {
			return nil, fmt.Errorf("dividing non-integer value")
		}
		if b == 0 {
			return nil, fmt.Errorf("division by zero")
		}
		return a / b, nil
	},
	Man: "module: (div 2 (add 1 1)) - exec two expressions and return ratio",
}

var modExtension = Extension{
	Name: "mod",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		if len(values) != 2 {
			return nil, fmt.Errorf("dividing requires 2 arguments")
		}
		a, ok := values[0].(Int)
		if !ok {
			return nil, fmt.Errorf("dividing non-integer value")
		}
		b, ok := values[1].(Int)
		if !ok {
			return nil, fmt.Errorf("dividing non-integer value")
		}
		if b == 0 {
			return nil, fmt.Errorf("division by zero")
		}
		return a % b, nil
	},
	Man: "module: (mod 2 (add 1 1)) - exec two expressions and return modulo",
}

var signExtension = Extension{
	Name: "sign",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		v, ok := values[len(values)-1].(Int)
		if !ok {
			return nil, fmt.Errorf("sign non-integer value")
		}
		switch {
		case v > 0:
			return Int(+1), nil
		case v < 0:
			return Int(-1), nil
		default:
			return Int(0), nil
		}
	},
	Man: "module: (sign 3) - exec an expression and return the sign",
}

var listExtension = Extension{
	Name: "list",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		var l List
		for _, v := range values {
			l = append(l, v)
		}
		return l, nil
	},
	Man: "module: (list 1 2 (lambda x (add x 1))) - make a list",
}

var appendExtension = Extension{
	Name: "append",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		l, ok := values[0].(List)
		if !ok {
			return nil, fmt.Errorf("first argument must be list")
		}
		return append(l, values[1:]...), nil
	},
	Man: "module: (append l 2 (add 1 1)) - append elements into list l and return a new list",
}

var sliceExtension = Extension{
	Name: "slice",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		if len(values) != 3 {
			return nil, fmt.Errorf("slice requires 3 arguments")
		}
		l, ok := values[0].(List)
		if !ok {
			return nil, fmt.Errorf("first argument must be list")
		}
		if len(l) < 1 {
			return nil, fmt.Errorf("empty list")
		}
		i, ok := values[1].(Int)
		if !ok {
			return nil, fmt.Errorf("second argument must be integer")
		}
		j, ok := values[2].(Int)
		if !ok {
			return nil, fmt.Errorf("third argument must be integer")
		}
		length := Int(len(l))
		if i < 1 || i > length || j < 1 || j > length {
			return nil, fmt.Errorf("list is out of range")
		}
		return l[i-1 : j], nil
	},
	Man: "module: (slice l 2 3) - make a slice of a list l[2, 3] (list is 1-indexing and slice is a closed interval)",
}

var peekExtension = Extension{
	Name: "peek",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		if len(values) < 2 {
			return nil, fmt.Errorf("peak requires at least 2 arguments")
		}
		l, ok := values[0].(List)
		if !ok {
			return nil, fmt.Errorf("first argument must be list")
		}
		length := Int(len(l))
		if length < 1 {
			return nil, fmt.Errorf("empty list")
		}
		var outputs List
		for j := 1; j < len(values); j++ {
			i, ok := values[j].(Int)
			if !ok {
				return nil, fmt.Errorf("second argument must be integer")
			}
			if i < 1 || i > length {
				return nil, fmt.Errorf("list is out of range")
			}
			outputs = append(outputs, l[i-1])
		}
		if len(outputs) == 1 {
			return outputs[0], nil
		}
		return outputs, nil
	},
	Man: "module: (peek l 3 2) - get elem from list (can get multiple elements) (list is 1-indexing)",
}

var lenExtension = Extension{
	Name: "len",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		if len(values) != 1 {
			return nil, fmt.Errorf("len requires 1 argument")
		}
		switch v := values[0].(type) {
		case List:
			return Int(len(v)), nil
		case Dict:
			return Int(len(v)), nil
		default:
			return nil, fmt.Errorf("first argument must be list or dict")
		}
	},
	Man: "module: (len l) - get length of a list of dict",
}

// mapModule - TODO make map parallel by make a copy of the latest frame, reuse other frames, call in parallel
var mapModule = Module{
	Name: "map",
	Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
		if len(expr.Args) != 2 {
			return nil, fmt.Errorf("map requires 2 arguments")
		}
		l1, err := r.Step(ctx, expr.Args[0])
		if err != nil {
			return nil, err
		}
		l, ok := l1.(List)
		if !ok {
			return nil, fmt.Errorf("first argument must be list")
		}
		f1, err := r.Step(ctx, expr.Args[1])
		if err != nil {
			return nil, err
		}
		var outputs List
		switch f := f1.(type) {
		case Lambda:
			if len(f.Params) != 1 {
				return nil, fmt.Errorf("map function requires 1 argument")
			}
			for _, v := range l {
				// 2. add argument to local Frame
				localFrame := make(Frame).Update(f.Frame)
				localFrame[f.Params[0]] = v
				// 3. push Frame to Stack
				r.Stack = append(r.Stack, localFrame)
				// 4. exec function
				o, err := r.Step(ctx, f.Impl)
				// 5. pop Frame from Stack
				r.Stack = r.Stack[:len(r.Stack)-1]
				// 6. append o
				if err != nil {
					return nil, err
				}
				outputs = append(outputs, o)
			}
		case Module:
			for _, v := range l {
				// 2. add argument to local Frame
				localFrame := make(Frame)
				localFrame["x"] = v // dummy variable
				// 3. make dummy expr and exec
				o, err := f.Exec(ctx, r, LambdaExpr{
					Name: "",
					Args: []Expr{Name("x")}, // dummy variable
				})
				// 5. pop Frame from Stack
				r.Stack = r.Stack[:len(r.Stack)-1]
				// 6. append o
				if err != nil {
					return nil, err
				}
				outputs = append(outputs, o)
			}
		default:
			return nil, fmt.Errorf("runtime error: map module requires a function")
		}
		return outputs, nil
	},
	Man: "module: (map l (lambda y (add 1 y))) - map",
}

// TODO - implement map filter reduce

var typeExtension = Extension{
	Name: "type",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		var types List
		for _, v := range values {
			types = append(types, getType(v))
		}
		if len(types) == 1 {
			return types[0], nil
		}
		return types, nil
	},
	Man: "module: (type x 1 (lambda y (add 1 y))) - get types of objects (can get multiple ones)",
}

var stackModule = Module{
	Name: "stack",
	Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
		var stack List
		for _, f := range r.Stack {
			frame := make(Dict)
			for k, v := range f {
				frame[String(k)] = v
			}
			stack = append(stack, frame)
		}
		return stack, nil
	},
	Man: "module: (stack) - get stack",
}

var printExtension = Extension{
	Name: "print",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {
		for _, v := range values {
			fmt.Printf("%v ", v)
		}
		fmt.Println()
		return Int(len(values)), nil
	},
	Man: "module: (print 1 x (lambda 3)) - print values",
}

var unicodeExtension = Extension{
	Name: "unicode",
	Exec: func(ctx context.Context, values ...Object) (Object, error) {

		var output String = ""
		for _, v := range values {
			if v, ok := v.(Int); ok {
				output += String(fmt.Sprintf("%c", rune(v)))
			} else {
				return nil, fmt.Errorf("argument must be int")
			}
		}
		return output, nil
	},
	Man: "module: (unicode 72 101 108 108 111 44 32 87 111 114 108 100 33) - convert a list of integers into string - this is just for hello world",
}
./pkg/fp/runtime_core.go
package fp

import (
	"context"
	"errors"
	"fmt"
	"os"
)

type Runtime struct {
	parseLiteral func(lit String) (Object, error)
	Stack        []Frame `json:"stack,omitempty"`
}
type Frame map[String]Object

func (f Frame) Update(otherFrame Frame) Frame {
	for k, v := range otherFrame {
		f[k] = v
	}
	return f
}

func (r *Runtime) String() string {
	s := ""
	for i, f := range r.Stack {
		s += "["
		for k, v := range f {
			s += fmt.Sprintf("%s -> %v, ", k, v)
		}
		if i != len(r.Stack)-1 {
			s += "]\n"
		} else {
			s += "]"
		}
	}
	return s
}

func (r *Runtime) LoadModule(m Module) *Runtime {
	r.Stack[0][m.Name] = m
	return r
}

func (r *Runtime) LoadParseLiteral(f func(lit String) (Object, error)) *Runtime {
	r.parseLiteral = f
	return r
}

type Extension struct {
	Name String
	Exec func(ctx context.Context, values ...Object) (Object, error)
	Man  string
}

func (r *Runtime) LoadExtension(e Extension) *Runtime {
	return r.LoadModule(Module{
		Name: e.Name,
		Exec: func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error) {
			args, err := r.stepMany(ctx, expr.Args...)
			if err != nil {
				return nil, err
			}
			var unwrappedArgs []Object
			i := 0
			for i < len(args) {
				if _, ok := args[i].(Unwrap); ok {
					if i+1 >= len(args) {
						return nil, errors.New("unwrapping arguments must be a list")
					}
					argsList, ok := args[i+1].(List)
					if !ok {
						return nil, errors.New("unwrapping arguments must be a list")
					}
					for _, elem := range argsList {
						unwrappedArgs = append(unwrappedArgs, elem)
					}
					i += 2
				} else {
					unwrappedArgs = append(unwrappedArgs, args[i])
					i++
				}
			}
			return e.Exec(ctx, unwrappedArgs...)
		},
		Man: e.Man,
	})
}

const DETECT_NONPURE = true

func (r *Runtime) searchOnStack(name String) (Object, error) {
	for i := len(r.Stack) - 1; i >= 0; i-- {
		if o, ok := r.Stack[i][name]; ok {
			if DETECT_NONPURE && i != 0 && i < len(r.Stack)-1 {
				_, _ = fmt.Fprintf(os.Stderr, "non-pure function")
			}
			return o, nil
		}
	}
	return nil, fmt.Errorf("object not found %s", name)
}

type Interrupt struct{}

func (i Interrupt) Error() string {
	return "interrupt"
}

var InterruptError = Interrupt{}

// Step - implement minimal set of instructions for the language to be Turing complete
// let, Lambda, case, sign, sub, add, tail
func (r *Runtime) Step(ctx context.Context, expr Expr) (Object, error) {
	select {
	case <-ctx.Done():
		return nil, InterruptError
	default:
		switch expr := expr.(type) {
		case Name:
			var v Object
			// parse name
			v, err := r.parseLiteral(String(expr))
			if err == nil {
				return v, nil
			}
			// find in stack for variable
			return r.searchOnStack(String(expr))

		case LambdaExpr:
			f, err := r.searchOnStack(String(expr.Name))
			if err != nil {
				return nil, err
			}
			switch f := f.(type) {
			case Lambda:
				// 1. evaluate arguments
				args, err := r.stepMany(ctx, expr.Args...)
				if err != nil {
					return nil, err
				}
				// 2. add argument to local Frame
				localFrame := make(Frame).Update(f.Frame)
				for i := 0; i < len(f.Params); i++ {
					localFrame[f.Params[i]] = args[i]
				}
				// 3. push Frame to Stack
				r.Stack = append(r.Stack, localFrame)
				// 4. exec function
				v, err := r.Step(ctx, f.Impl)
				if err != nil {
					return nil, err
				}
				// 5. pop Frame from Stack
				r.Stack = r.Stack[:len(r.Stack)-1]
				return v, nil
			case Module:
				return f.Exec(ctx, r, expr)
			default:
				return nil, fmt.Errorf("function or module %s found but wrong type", expr.Name.String())
			}
		default:
			return nil, fmt.Errorf("runtime error: unknown expression type")
		}
	}
}

func (r *Runtime) stepMany(ctx context.Context, exprList ...Expr) ([]Object, error) {
	var outputs []Object
	for _, expr := range exprList {
		v, err := r.Step(ctx, expr)
		if err != nil {
			return nil, err
		}
		outputs = append(outputs, v)
	}
	return outputs, nil
}
./pkg/fp/runtime_types.go
package fp

import (
	"context"
	"fmt"
)

// types - TODO implement custom data types like Int, List, Dict

// Object : union - TODO : introduce new data types
type Object interface {
	String() string
	MustTypeObject() struct{} // for type-safety every Object must implement this
}

func getType(o Object) String {
	switch o.(type) {
	case Int:
		return "Int"
	case String:
		return "String"
	case Lambda:
		return "Lambda"
	case Module:
		return "Module"
	case List:
		return "List"
	case Dict:
		return "Dict"
	case Wildcard:
		return "Wildcard"
	case Unwrap:
		// unfortunately, one cannot use (type *) to get the type if unwrap since it will try to replace unwrap the next argument
		return "Unwrap"
	default:
		return "unknown"
	}
}

type Int int

func (i Int) String() string {
	return fmt.Sprintf("%d", i)
}

func (i Int) MustTypeObject() struct{} {
	return struct{}{}
}

type Dict map[Object]Object

func (d Dict) String() string {

	s := ""
	s += "{"
	for k, v := range d {
		s += fmt.Sprintf("%s -> %s,", k.String(), v.String())
	}
	s += "}"
	return s
}

func (d Dict) MustTypeObject() struct{} {
	return struct{}{}
}

type Unwrap struct{}

func (u Unwrap) String() string {
	return "*"
}

func (u Unwrap) MustTypeObject() struct{} {
	return struct{}{}
}

type Wildcard struct{}

func (w Wildcard) String() string {
	return "_"
}

func (w Wildcard) MustTypeObject() struct{} {
	return struct{}{}
}

type String string

func (s String) String() string {
	return string(s)
}

func (s String) MustTypeObject() struct{} {
	return struct{}{}
}

type Lambda struct {
	Params []String `json:"params,omitempty"`
	Impl   Expr     `json:"impl,omitempty"`
	Frame  Frame    `json:"frame,omitempty"`
}

func (l Lambda) String() string {
	s := "(lambda "
	for _, param := range l.Params {
		s += param.String() + " "
	}
	s += l.Impl.String()
	s += ")"
	return s
}

func (l Lambda) MustTypeObject() struct{} {
	return struct{}{}
}

type Module struct {
	Name String `json:"name,omitempty"`
	Exec func(ctx context.Context, r *Runtime, expr LambdaExpr) (Object, error)
	Man  string `json:"man,omitempty"`
}

func (m Module) String() string {
	return m.Man
}

func (m Module) MustTypeObject() struct{} {
	return struct{}{}
}

type List []Object

func (l List) String() string {
	s := ""
	s += "["
	for _, obj := range l {
		s += fmt.Sprintf("%v,", obj)
	}
	s += "]"
	return s
}

func (l List) MustTypeObject() struct{} {
	return struct{}{}
}
./pkg/repl/repl.go
package repl

import (
	"context"
	"errors"
	"fmt"
	"fp/pkg/fp"
	"sort"
)

type REPL interface {
	ReplyInput(ctx context.Context, input string) (output string, executed bool)
	ClearBuffer() (output string)
}

type fpRepl struct {
	runtime *fp.Runtime
	parser  *fp.Parser
	buffer  string
}

func (r *fpRepl) ReplyInput(ctx context.Context, input string) (output string, executed bool) {
	tokenList := fp.Tokenize(input)
	executed = false
	if len(tokenList) == 0 {
		executed = true
	} else {
		for _, token := range tokenList {
			expr := r.parser.Input(token)
			if expr != nil {
				executed = true

				lastFrame := make(fp.Frame).Update(r.runtime.Stack[len(r.runtime.Stack)-1])
				stackSize := len(r.runtime.Stack)
				output, err := r.runtime.Step(ctx, expr)
				if err != nil {
					if errors.Is(err, fp.InterruptError) {
						// reset stack size
						r.runtime.Stack = r.runtime.Stack[:stackSize-1]
						r.runtime.Stack = append(r.runtime.Stack, lastFrame)
						r.writeln("interrupted - stack was recovered")
					}
					r.writeln(err.Error())
					continue
				}
				r.write("%v\n", output)
			}
		}
	}
	return r.flush(), executed
}

func (r *fpRepl) ClearBuffer() (output string) {
	r.parser.Clear()
	r.writeln("(Control + C) to clear parser buffer, (Control + D) to exit")
	return r.flush()
}

func (r *fpRepl) flush() (output string) {
	output, r.buffer = r.buffer, ""
	return output
}

func (r *fpRepl) write(format string, a ...interface{}) {
	r.buffer += fmt.Sprintf(format, a...)
}
func (r *fpRepl) writeln(format string, a ...interface{}) {
	r.write(format+"\n", a...)
}

func NewFP(runtime *fp.Runtime) (repl REPL, welcome string) {
	r := &fpRepl{
		runtime: runtime,
		parser:  &fp.Parser{},
		buffer:  "",
	}
	r.writeln("welcome to fp repl! type function or module name for help")
	r.write("loaded modules: ")
	var funcNameList []string
	for k := range r.runtime.Stack[0] {
		funcNameList = append(funcNameList, string(k))
	}
	sort.Strings(funcNameList)
	for _, name := range funcNameList {
		r.write("%s ", name)
	}
	r.writeln("")
	return r, r.flush()
}
./example.lisp
// define multiplication
(let mul
    (lambda x y
        (case (sign y)                         // mul: (x y) -> xy
            0 0                                             // if y = 0, return 0
            -1 (sub 0 (mul x (sub 0 y)))                    // if y < 0, return 0 - x(-y)
            +1 (add x (mul x (sub y 1)))                    // if y > 0, return x + x(y-1)
        )
    )
)

// define modulo
(let mod
    (lambda x y
        (tail                                  // mul: (x y) -> x % y // defined only for positive y
            (let z (sub x y))                               // local var z = x - y
            (print z x y 6)                                // print local value of z (with label 6)
            (case (sign z)
                +1 (mod z y)                                // if x > y, return (x - y) % y
                0  0                                        // if x = y, return 0
                -1 x                                        // if x < y, return x
            )
        )
    )
)




// partial function using lambda
(let addx
    (lambda x
        (lambda y (add x y))
    )
)

// dict_new
(let dict_new (lambda (lambda x 0)))
// dict_get d[x]
(let dict_get (lambda d x (d x)))

// dict_set d[x] = y
(let dict_set (lambda d x y (
    lambda z (
        case z
            x y
            _ (dict_get d z)
    )
)))

(let z 20)
(print z 1)                                            // print z=20 (with label 1)
(print (mul 13 -17) 2)                                 // print 13 * (-17) (with label 2)
(print (mod 17  13) 3)                                 // print 17 % 13 (with label 3)
(print z 4)                                            // print z=20 again (with label 4), verify that the other z is an actual local variable

(let x_v (print 2 5))                                  // declare x_v - (print 2 5) is executed immediately
(let x_f (lambda (print 2 6)))                         // declare x_f - (print 2 6) is not executed immediately
(print 7)                                              // for debugging
(x_f)                                                   // apply x_f - (print 2 6) is executed

(let f (lambda x (add x 1)))                            // define lambda
(print f)                                              // print lambda
(print (f 21) 8)                                       // print 21 + 1 using lambda

(let t 3)
(let add3 (addx t))                                     // partial function
(print (add3 14) 9)


(print (div 6 2))                                      // test extension

(let l (list 1 2 3 5 -7))                        // test list
(let l (append l 6))
(print l)


// define fibonacci

(let fib
    (lambda x
        (case (sign (sub x 1))
            1 (tail
                (let y (fib (sub x 1)))
                (let z (fib (sub x 2)))
                (add y z)
            )
            _ x
        )
    )
)

(print (fib 20) 11)                                // print the 20-th fibonacci

// test map on list
(let x (list 1 2 3))
(map x (lambda y (add 1 y)))
do you have any comment on this?
