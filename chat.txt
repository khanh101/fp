below is the readme and implementation of a simple functional programming language
README.md
# FP

A simple functional programming language in 130 lines of code with `functions as first-class citizens`. $\mathbb{F}_p$ also denotes the finite field of order $p$ 


## How to implement data structures like list, dict

data structures can be implemented using functions, example below

floating point is useful

## How to handle infix operator?

translate `[<expr_1> <name_1> <expr_2> <name_2> <expr_3>]` into `(<name_1> <expr_1> (<name_2> <expr_2> <expr_3>))` - todo 
## Isn't `(let x 3)` equivalent to `(let x (lambda 3))`?

yes, if functions are pure, then we can consider `(let x <expr>)` as a pure function of the form `(let x (lambda <expr>))`. 
however, if functions are not pure, if `x` is defined locally, `(let f (lambda (x + 3)))` and `let f (x + 3)` are different
since variables are evaluated at definition but functions are only evaluated when it is called,
that is if we pass `f` outside of the function, it no longer valid.
in the code below, i gave an example with `(let x_v (print 2 5))` and `(func x_f (print 2 6))`

## How to handle higher-order functions

higher-order function is already implemented

## Tail call optimization

WIP

## Performance improvement

if we assume functions are pure, one can consider the whole program as a set of expressions (with some dependencies of `let`)
each function call only need its own variable scope, they can execute every expression at the same time (possibly with some waiting for `let` statement) 

## But can it run Doom?

no ðŸ˜…

## language specs

- program : a list of expression
- name and expression: name is a string of characters, e.g. `x`, `mul`, and expression is enclosed with parentheses starting with a name, e.g `(let x 3)`, `(add 1 2)`
- evaluation: in run time, name and expression have an associated value
    - name is evaluated using a pool of variables; in code, it is `sttack`. if a name is not of a variable name declared using `let` or `input`, it is undefined behavior
    - expression is evaluated using its name

- builtin functions: ` let, lambda, case, sign, sub, add, tail`
```
(let <name> <expr>)                                          - assign value of <expr> into local variable <name>
(lambda <name_1> ... <name_n> <expr>)                        - declare an anonymous function
(case <cond> <expr_1> <expr_2>... <key_{n-1}> <expr_n>)      - branching, if <cond> = <key_i> for i odd, return <expr_{i+1}>
(sign <expr>)                                                - return (-1), 0, (+1) according to sign of <expr>
(add <expr_1> ... <expr_n>)                                  - add
(sub <expr_1> <expr_2>)                                      - subtract
(tail <expr_1> ... <expr_n>)                                 - evaluate all expressions then return the last one
                                                               (use to declare local variables, do multistep calculation)
```

- extension functions: `div, print, input, make_list, append_list`

- wildcard symbol: `_` is a special symbol used in `case` to mark every other cases
- no match is `case` is an undefined behavior

## a simple program

```
// define multiplication
(let mul
    (lambda x y
        (case (sign y)                         // mul: (x y) -> xy
            0 0                                             // if y = 0, return 0
            -1 (sub 0 (mul x (sub 0 y)))                    // if y < 0, return 0 - x(-y)
            +1 (add x (mul x (sub y 1)))                    // if y > 0, return x + x(y-1)
        )
    )
)

// define modulo
(let mod
    (lambda x y
        (tail                                  // mul: (x y) -> x % y // defined only for positive y
            (let z (sub x y))                               // local var z = x - y
            (print z x y 6)                                // print local value of z (with label 6)
            (case (sign z)
                +1 (mod z y)                                // if x > y, return (x - y) % y
                0  0                                        // if x = y, return 0
                -1 x                                        // if x < y, return x
            )
        )
    )
)

// define fibonacci

(let fibonacci
    (lambda x
        (case (sign (sub x 1))
            1 (tail
                (let y (fibonacci (sub x 1)))
                (let z (fibonacci (sub x 2)))
                (add y z)
            )
            _ x
        )
    )
)


// partial function using lambda
(let addx
    (lambda x
        (lambda y (add x y))
    )
)

// dict_new
(let dict_new (lambda (lambda x 0)))
// dict_get d[x]
(let dict_get (lambda d x (d x)))

// dict_set d[x] = y
(let dict_set (lambda d x y (
    lambda z (
        case z
            x y
            _ (dict_get d z)
    )
)))

(let z 20)
(print z 1)                                            // print z=20 (with label 1)
(print (mul 13 -17) 2)                                 // print 13 * (-17) (with label 2)
(print (mod 17  13) 3)                                 // print 17 % 13 (with label 3)
(print z 4)                                            // print z=20 again (with label 4), verify that the other z is an actual local variable

(let x_v (print 2 5))                                  // declare x_v - (print 2 5) is executed immediately
(let x_f (lambda (print 2 6)))                         // declare x_f - (print 2 6) is not executed immediately
(print 7)                                              // for debugging
(x_f)                                                   // apply x_f - (print 2 6) is executed

(let f (lambda x (add x 1)))                            // define lambda
(print f)                                              // print lambda
(print (f 21) 8)                                       // print 21 + 1 using lambda

(let t 3)
(let add3 (addx t))                                     // partial function
(print (add3 14) 9)

// dict example
(let d (dict_new))                                      // new dict
(let d (dict_set d 2 300))                                 // set value
(let d (dict_set d 3 500))                                 // set value
(let d (dict_set d 2 200))                                 // set value
(print (dict_get d 2) 11)                                 // should print 200

// end dict example

(print (div 6 2))                                      // test extension

(let l (make_list 1 2 3 5 -7))                        // test list
(let l (append_list l 6))
(print l)

(let x (input))                                           // waiting for user input
(print (fibonacci x) 11)                                // print the x-th fibonacci


```
./bin/test/main.go
package main

import (
	"fmt"
	"fp/pkg/fp"
	"os"
)

func main() {
	buffer, err := os.ReadFile("example.lisp")
	if err != nil {
		panic(err)
	}
	str := string(buffer)
	tokenList := fp.Tokenize(str)

	exprList, tokenList := fp.ParseAll(tokenList)
	if len(tokenList) > 0 {
		panic("parse error")
	}

	r := fp.NewRuntime().WithExtension("div", func(nums ...fp.Value) fp.Value {
		if len(nums) != 2 {
			panic("runtime error")
		}
		return nums[0].(int) / nums[1].(int)
	}).WithExtension("print", func(nums ...fp.Value) fp.Value {
		for _, num := range nums {
			fmt.Printf("%v ", num)
		}
		fmt.Println()
		return len(nums)
	}).WithExtension("input", func(nums ...fp.Value) fp.Value {
		var v int
		_, err := fmt.Scanf("%d", &v)
		if err != nil {
			panic(err)
		}
		return v
	}).WithExtension("make_list", func(nums ...fp.Value) fp.Value {
		var v []fp.Value
		for _, num := range nums {
			v = append(v, num)
		}
		return v
	}).WithExtension("append_list", func(nums ...fp.Value) fp.Value {
		return append(nums[0].([]fp.Value), nums[1:]...)
	})
	for _, expr := range exprList {
		r.Step(expr)
	}
}
./pkg/fp/runtime.go
package fp

import (
	"fmt"
	"os"
	"strconv"
)

const DETECT_NONPURE = true

func NewRuntime() *Runtime {
	return (&Runtime{
		Stack: []Frame{
			make(Frame),
		},
		systemExtension: make(map[Name]func(r *Runtime, expr LambdaExpr) Value),
		userExtension:   make(map[Name]func(...Value) Value),
	}).WithSystemExtension("let", func(r *Runtime, expr LambdaExpr) Value {
		name := expr.Args[0].(Name)
		var v Value
		for i := 1; i < len(expr.Args); i++ {
			if i == len(expr.Args)-1 {
				v = r.Step(expr.Args[i], WithTailCall)
			} else {
				v = r.Step(expr.Args[i])
			}
		}
		r.Stack[len(r.Stack)-1][name] = v
		return v
	}).WithSystemExtension("lambda", func(r *Runtime, expr LambdaExpr) Value {
		v := Lambda{
			Params: nil,
			Impl:   nil,
			Frame:  nil,
		}
		for i := 0; i < len(expr.Args)-1; i++ {
			paramName := expr.Args[i].(Name)
			v.Params = append(v.Params, paramName)
		}
		v.Impl = expr.Args[len(expr.Args)-1]
		v.Frame = make(Frame).Update(r.Stack[len(r.Stack)-1])
		return v
	}).WithSystemExtension("case", func(r *Runtime, expr LambdaExpr) Value {
		cond := r.Step(expr.Args[0])
		i := func() int {
			for i := 1; i < len(expr.Args); i += 2 {
				if arg, ok := expr.Args[i].(Name); ok && arg == "_" {
					return i
				}
				if r.Step(expr.Args[i]) == cond {
					return i
				}
			}
			panic("runtime error")
		}()
		return r.Step(expr.Args[i+1], WithTailCall)
	}).WithSystemExtension("sign", func(r *Runtime, expr LambdaExpr) Value {
		v := r.Step(expr.Args[0], WithTailCall).(int)
		switch {
		case v > 0:
			return +1
		case v < 0:
			return -1
		case v == 0:
			return 0
		}
		panic("runtime error")
	}).WithSystemExtension("sub", func(r *Runtime, expr LambdaExpr) Value {
		a := r.Step(expr.Args[0]).(int)
		b := r.Step(expr.Args[1], WithTailCall).(int)
		return a - b
	}).WithSystemExtension("add", func(r *Runtime, expr LambdaExpr) Value {
		var v int
		for i := 0; i < len(expr.Args); i++ {
			if i == len(expr.Args)-1 {
				v += r.Step(expr.Args[i], WithTailCall).(int)
			} else {
				v += r.Step(expr.Args[i]).(int)
			}
		}
		return v
	}).WithSystemExtension("tail", func(r *Runtime, expr LambdaExpr) Value {
		var v Value
		for i := 0; i < len(expr.Args); i++ {
			if i == len(expr.Args)-1 {
				v = r.Step(expr.Args[i], WithTailCall)
			} else {
				v = r.Step(expr.Args[i])
			}
		}
		return v
	})
}

func (r *Runtime) WithExtension(name Name, f func(...Value) Value) *Runtime {
	r.userExtension[name] = f
	return r
}

func (r *Runtime) WithSystemExtension(name Name, f func(r *Runtime, expr LambdaExpr) Value) *Runtime {
	r.systemExtension[name] = f
	return r
}

type Runtime struct {
	Stack           []Frame
	systemExtension map[Name]func(r *Runtime, expr LambdaExpr) Value
	userExtension   map[Name]func(...Value) Value
}

// Value : union of int, string, Lambda - TODO : introduce new data types
type Value interface{}
type Lambda struct {
	Params []Name
	Impl   Expr
	Frame  Frame
}

type Frame map[Name]Value

func (f Frame) Update(otherFrame Frame) Frame {
	for k, v := range otherFrame {
		f[k] = v
	}
	return f
}

type callOption struct {
	tailCall bool
}

func WithTailCall(o *callOption) *callOption {
	o.tailCall = false // TODO - debug tailcall
	return o
}

// Step - implement minimal set of instructions for the language to be Turing complete
// let, Lambda, case, sign, sub, add, tail
func (r *Runtime) Step(expr Expr, callOptions ...func(*callOption) *callOption) Value {
	o := &callOption{
		tailCall: false,
	}
	for _, opt := range callOptions {
		o = opt(o)
	}
	switch expr := expr.(type) {
	case Name:
		var v Value
		// convert to number
		v, err := strconv.Atoi(string(expr))
		if err == nil {
			return v
		}
		for i := len(r.Stack) - 1; i >= 0; i-- {
			if v, ok := r.Stack[i][expr]; ok {
				if DETECT_NONPURE && i != 0 && i < len(r.Stack)-1 {
					_, _ = fmt.Fprintf(os.Stderr, "non-pure function")
				}
				return v
			}
		}
		panic("runtime error")
	case LambdaExpr:
		// check for systemExtension
		if f, ok := r.systemExtension[expr.Name]; ok {
			return f(r, expr)
		}
		// check for userExtension
		if f, ok := r.userExtension[expr.Name]; ok {
			var args []Value
			for _, arg := range expr.Args {
				args = append(args, r.Step(arg))
			}
			return f(args...)
		}
		// user-defined function application
		// 1. get func recursively
		f := func() Lambda {
			for i := len(r.Stack) - 1; i >= 0; i-- {
				if f, ok := r.Stack[i][expr.Name]; ok {
					if DETECT_NONPURE && i != 0 && i < len(r.Stack)-1 {
						_, _ = fmt.Fprintf(os.Stderr, "non-pure function")
					}
					return f.(Lambda)
				}
			}
			panic("runtime error")
		}()
		// 1. evaluate arguments
		var args []Value
		for _, arg := range expr.Args {
			args = append(args, r.Step(arg))
		}
		if o.tailCall {
			// tail call - use last frame
			for i := 0; i < len(f.Params); i++ {
				r.Stack[len(r.Stack)-1][f.Params[i]] = args[i]
			}
		} else {
			// 2. add argument to local Frame
			localFrame := make(Frame).Update(f.Frame)
			for i := 0; i < len(f.Params); i++ {
				localFrame[f.Params[i]] = args[i]
			}
			// 3. push Frame to Stack
			r.Stack = append(r.Stack, localFrame)
		}
		// 4. exec function
		v := r.Step(f.Impl)
		if o.tailCall {
			// pass
		} else {
			// 5. pop Frame from Stack
			r.Stack = r.Stack[:len(r.Stack)-1]
		}
		return v
	default:
		panic("runtime error")
	}
}
./pkg/fp/ast.go
package fp

// Expr : union of Name, LambdaExpr
type Expr interface{}

type Name string
type LambdaExpr struct {
	Name Name
	Args []Expr
}
./pkg/fp/parser.go
package fp

import (
	"strings"
)

type Token = string

func pop(tokenList []Token) ([]Token, Token) {
	return tokenList[1:], tokenList[0]
}

func peak(tokenList []Token) Token {
	return tokenList[0]
}

func Tokenize(str string) []Token {
	// remove comment
	parts := strings.Split(str, "\n")
	newParts := []string{}
	for _, part := range parts {
		newParts = append(newParts, strings.Split(part, "//")[0])
	}

	str = strings.Join(newParts, "\n")

	str = strings.ReplaceAll(str, "\n", " ")
	str = strings.ReplaceAll(str, "(", " ( ")
	str = strings.ReplaceAll(str, ")", " ) ")

	return strings.Fields(str)
}

func ParseAll(tokenList []Token) ([]Expr, []Token) {
	var expr Expr
	var exprList []Expr
	for {
		if len(tokenList) == 0 || peak(tokenList) == ")" {
			break
		}
		expr, tokenList = parse(tokenList)
		exprList = append(exprList, expr)
	}
	return exprList, tokenList
}

func parse(tokenList []Token) (Expr, []Token) {
	if len(tokenList) == 0 {
		return nil, nil
	}
	tokenList, head := pop(tokenList) // pop ( or [ or name
	switch head {
	case "(":
		tokenList, funcName := pop(tokenList)
		exprList, tokenList := ParseAll(tokenList)
		tokenList, tail := pop(tokenList) // pop )
		if tail != ")" {
			panic("parse error")
		}
		return LambdaExpr{
			Name: Name(funcName),
			Args: exprList,
		}, tokenList
	default:
		return Name(head), tokenList
	}
}
do you have any comment on this?
