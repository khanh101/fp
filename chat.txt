below is the readme and implementation of a simple functional programming language
README.md
# FP

A simple functional programming language in 130 lines of code with `functions as first-class citizens`. $\mathbb{F}_p$ also denotes the finite field of order $p$ 


## How to implement data structures like list, dict

list is a vector of integers is $\mathbb{Z}^{\mathbb{N}} \cong \mathbb{Z}$ so we're done. Similarly, for any other data structures

it is also possible to define list as a function $\mathbb{N} \to \mathbb{Z}$, operation on list is composition of function

floating point is useful

## How to handle infix operator?

translate `[<expr_1> <name_1> <expr_2> <name_2> <expr_3>]` into `(<name_1> <expr_1> (<name_2> <expr_2> <expr_3>))` - todo

## Isn't `(let x 3)` equivalent to `(let x (lambda 3))`?

yes, if functions are pure, then we can consider `(let x <expr>)` as a pure function of the form `(func x <expr>)`. 
however, if functions are not pure, if `x` is defined locally, `(let f (lambda (x + 3)))` and `let f (x + 3)` are different
since variables are evaluated at definition but functions are only evaluated when it is called,
that is if we pass `f` outside of the function, it no longer valid.
in the code below, i gave an example with `(let x_v (output 2 5))` and `(func x_f (output 2 6))`

## How to handle higher-order functions

higher-order function is already implemented

## Performance improvement

if we assume functions are pure, one can consider the whole program as a set of expressions (with some dependencies of `let`)
each function call only need its own variable scope, they can execute every expression at the same time (possibly with some waiting for `let` statement) 

## But can it run Doom?

no ðŸ˜…

## language specs

- program : a list of expression
- name and expression: name is a string of characters, e.g. `x`, `mul`, and expression is enclosed with parentheses starting with a name, e.g `(let x 3)`, `(add 1 2)`
- evaluation: in run time, name and expression have an associated value
    - name is evaluated using a pool of variables; in code, it is `varStack`. if a name is not of a variable name declared using `let` or `input`, it is undefined behavior
    - expression is evaluated using its name

- builtin functions: `let (or ;), lambda (or =>), case, sign, add (or +), sub (or -), tail, input, output`
```
(let <name> <expr>)                                          - assign value of <expr> into local variable <name>
(lambda <name_1> ... <name_n> <expr>)                        - declare an anonymous function
(case <cond> <expr_1> <expr_2>... <key_{n-1}> <expr_n>)      - branching, if <cond> = <key_i> for i odd, return <expr_{i+1}>
(sign <expr>)                                                - return (-1), 0, (+1) according to sign of <expr>
(add <expr_1> ... <expr_n>)                                  - add
(sub <expr_1> <expr_2>)                                      - subtract
(tail <expr_1> ... <expr_n>                                  - evaluate all expressions then return the last one
                                                               (use to declare local variables, do multistep calculation)
(input <name>)                                               - read stdin and assign into <name>
(output <expr_1> ... <expr_n>                                - write to stdout
```

- wildcard symbol: `_` is a special symbol used in `case` to mark every other cases
- no match is `case` is an undefined behavior

## a simple program

```
// define multiplication
(let mul
    (lambda x y
        (case (sign y)                         // mul: (x y) -> xy
            0 0                                             // if y = 0, return 0
            -1 (sub 0 (mul x (sub 0 y)))                    // if y < 0, return 0 - x(-y)
            +1 (add x (mul x (sub y 1)))                    // if y > 0, return x + x(y-1)
        )
    )
)

// define modulo
(let mod
    (lambda x y
        (tail                                  // mul: (x y) -> x % y // defined only for positive y
            (let z (sub x y))                               // local var z = x - y
            (output z x y 6)                                // print local value of z (with label 6)
            (case (sign z)
                +1 (mod z y)                                // if x > y, return (x - y) % y
                0  0                                        // if x = y, return 0
                -1 x                                        // if x < y, return x
            )
        )
    )
)

// define fibonacci

(let fibonacci
    (lambda x
        (case (sign (sub x 1))
            1 (tail
                (let y (fibonacci (sub x 1)))
                (let z (fibonacci (sub x 2)))
                (add y z)
            )
            _ x
        )
    )
)

// partial function using lambda
(let addx
    (lambda x
        (lambda y (add x y))
    )
)

(let z 20)
(output z 1)                                            // print z=20 (with label 1)
(output (mul 13 -17) 2)                                 // print 13 * (-17) (with label 2)
(output (mod 17  13) 3)                                 // print 17 % 13 (with label 3)
(output z 4)                                            // print z=20 again (with label 4), verify that the other z is an actual local variable

(let x_v (output 2 5))                                  // declare x_v - (output 2 5) is executed immediately
(let x_f (lambda (output 2 6)))                         // declare x_f - (output 2 6) is not executed immediately
(output 7)                                              // for debugging
(x_f)                                                   // apply x_f - (output 2 6) is executed

(let f (lambda x (add x 1)))                            // define lambda
(output f)                                              // print lambda
(output (f 21) 8)                                       // print 21 + 1 using lambda

(let t 3)
(let add3 (addx t))                                     // partial function
(output (add3 14) 9)

(input x)                                               // waiting for user input
(output (fibonacci x) 10)                                // print the x-th fibonacci (with label 5)

```
./bin/test/main.go
package main

import (
	"fp/pkg/fp"
	"os"
)

func main() {

	buffer, err := os.ReadFile("example.lisp")
	if err != nil {
		panic(err)
	}
	str := string(buffer)
	tokenList := fp.Tokenize(str)

	exprList, tokenList := fp.ParseMany(tokenList)
	if len(tokenList) > 0 {
		panic("parse error")
	}

	r := fp.NewRuntime()
	for _, expr := range exprList {
		r.Step(expr)
	}
}
./pkg/fp/runtime.go
package fp

import (
	"fmt"
	"os"
	"strconv"
)

const DETECT_NONPURE = true

type Runtime interface {
	Step(expr Expr) Value
}

func NewRuntime() Runtime {
	return &newRuntime{stack: []frame{
		make(frame),
	}}
}

// Value : union of int and lambda - TODO : introduce new data types
type Value interface{}
type lambda struct {
	params []string
	impl   Expr
	frame  frame
}

type frame map[string]Value

func (f frame) update(otherFrame frame) frame {
	for k, v := range otherFrame {
		f[k] = v
	}
	return f
}

type newRuntime struct {
	stack []frame
}

func (r *newRuntime) Step(expr Expr) Value {
	switch expr := expr.(type) {
	case string:
		var v Value
		// convert to number
		v, err := strconv.Atoi(expr)
		if err == nil {
			return v
		}
		for i := len(r.stack) - 1; i >= 0; i-- {
			if v, ok := r.stack[i][expr]; ok {
				if DETECT_NONPURE && i != 0 && i < len(r.stack)-1 {
					_, _ = fmt.Fprintf(os.Stderr, "non-pure function")
				}
				return v
			}
		}
		panic("runtime error")
	case LambdaExpr:
		switch expr.Name {
		case "output":
			for _, arg := range expr.Args {
				v := r.Step(arg)
				fmt.Printf("%v ", v)
			}
			fmt.Println()
			return len(expr.Args)
		case "let":
			name := expr.Args[0].(string)
			v := r.Step(expr.Args[1])
			r.stack[len(r.stack)-1][name] = v
			return v
		case "input":
			name := expr.Args[0].(string)
			var v int
			_, err := fmt.Scanf("%d", &v)
			if err != nil {
				panic(err)
			}
			r.stack[len(r.stack)-1][name] = v
			return v
		case "lambda":
			v := lambda{
				params: nil,
				impl:   nil,
				frame:  nil,
			}
			for i := 0; i < len(expr.Args)-1; i++ {
				paramName := expr.Args[i].(string)
				v.params = append(v.params, paramName)
			}
			v.impl = expr.Args[len(expr.Args)-1]
			v.frame = make(frame).update(r.stack[len(r.stack)-1])
			return v
		case "case":
			cond := r.Step(expr.Args[0])
			i := func() int {
				for i := 1; i < len(expr.Args); i += 2 {
					if arg, ok := expr.Args[i].(string); ok && arg == "_" {
						return i
					}
					if r.Step(expr.Args[i]) == cond {
						return i
					}
				}
				panic("runtime error")
			}()
			return r.Step(expr.Args[i+1])
		case "sign":
			v := r.Step(expr.Args[0]).(int)
			switch {
			case v > 0:
				return +1
			case v < 0:
				return -1
			case v == 0:
				return 0
			}
		case "sub":
			a := r.Step(expr.Args[0]).(int)
			b := r.Step(expr.Args[1]).(int)
			return a - b
		case "add":
			v := 0
			for _, arg := range expr.Args {
				v += r.Step(arg).(int)
			}
			return v
		case "tail":
			var v Value
			for _, arg := range expr.Args {
				v = r.Step(arg)
			}
			return v
		default: // function application
			// 1. get func recursively
			f := func() lambda {
				for i := len(r.stack) - 1; i >= 0; i-- {
					if f, ok := r.stack[i][expr.Name]; ok {
						if DETECT_NONPURE && i != 0 && i < len(r.stack)-1 {
							_, _ = fmt.Fprintf(os.Stderr, "non-pure function")
						}
						return f.(lambda)
					}
				}
				panic("runtime error")
			}()
			// 1. evaluate arguments
			var args []Value
			for _, arg := range expr.Args {
				args = append(args, r.Step(arg))
			}
			// 2. add argument to local frame
			localFrame := make(frame).update(f.frame)
			for i := 0; i < len(f.params); i++ {
				localFrame[f.params[i]] = args[i]
			}
			// 3. push frame to stack
			r.stack = append(r.stack, localFrame)
			// 4. exec function
			v := r.Step(f.impl)
			// 5. pop frame from stack
			r.stack = r.stack[:len(r.stack)-1]
			return v
		}
	default:
		panic("runtime error")
	}
	panic("runtime error")
}
./pkg/fp/ast.go
package fp

const (
	BLOCKTYPE_NAME = "name" // name
	BLOCKTYPE_EXPR = "expr" // name + list of blocks
)

type Block struct {
	Type string
	Name string
	Args []*Block
}

// Expr : union of string, LambdaExpr
type Expr interface{}
type LambdaExpr struct {
	Name string
	Args []Expr
}
./pkg/fp/parser.go
package fp

import "strings"

type Token = string

func pop(tokenList []Token) ([]Token, Token) {
	return tokenList[1:], tokenList[0]
}

func peak(tokenList []Token) Token {
	return tokenList[0]
}

func Tokenize(str string) []Token {
	// remove comment
	parts := strings.Split(str, "\n")
	newParts := []string{}
	for _, part := range parts {
		newParts = append(newParts, strings.Split(part, "//")[0])
	}

	str = strings.Join(newParts, "\n")

	str = strings.ReplaceAll(str, "(", " ( ")
	str = strings.ReplaceAll(str, ")", " ) ")
	fields := strings.Fields(str)
	return fields
}

func ParseMany(tokenList []Token) ([]Expr, []Token) {
	var expr Expr
	var exprList []Expr
	for {
		if len(tokenList) == 0 || peak(tokenList) == ")" {
			break
		}
		expr, tokenList = parse(tokenList)
		exprList = append(exprList, expr)
	}
	return exprList, tokenList
}

func parse(tokenList []Token) (Expr, []Token) {
	if len(tokenList) == 0 {
		return nil, nil
	}
	tokenList, head := pop(tokenList) // pop ( or [ or name
	switch head {
	case "(":
		tokenList, funcName := pop(tokenList)
		exprList, tokenList := ParseMany(tokenList)
		tokenList, tail := pop(tokenList) // pop )
		if tail != ")" {
			panic("parse error")
		}
		return LambdaExpr{
			Name: funcName,
			Args: exprList,
		}, tokenList
	default:
		return head, tokenList
	}
}
do you have any comment on this?
